'use strict';

const line = require('@line/bot-sdk');
const express = require('express');

// create LINE SDK config from env variables
const config = {
  channelAccessToken: "y+glmKbPyMfQMkWGrDu9SyRDsxEEuH5ObDTf9U5wnSrlwVYrA2KbEsgwrnTLcu8x2MgstWMyQn06l5o+C2CmUiAF04LlHYeRYqpOoeoYuaG77Mehu6Nn/JUOfdXpDOmt8iZ6kTynHoIPe6WGmc9xkgdB04t89/1O/w1cDnyilFU=",
  channelSecret: "0515b6334a316528c5ba8b0ec939c65e",
};

// create LINE SDK client
const client = new line.Client(config);

// create Express app
// about Express itself: https://expressjs.com/
const app = express();

// register a webhook handler with middleware
// about the middleware, please refer to doc
app.post('/callback', line.middleware(config), (req, res) => {
  Promise
    .all(req.body.events.map(handleEvent))
    .then((result) => res.json(result))
    .catch((err) => {
      console.error(err);
      res.status(500).end();
    });
});

// event handler
function handleEvent(event) {
  if (event.type !== 'message' || event.message.type !== 'text') {
    // ignore non-text-message event
    return Promise.resolve(null);
  }else if (event.message.type == "text" && event.message.text == "Hi") {
    const payload = [
      {
        type : "text",
        text : "Hello!",
      },
      {
        type : "text",
        text : "How are you?!"
      }
    ];
    return client.replyMessage(event.replyToken, payload);
  }
  else if (event.message.type == "text" && event.message.text == "okay") {
    const payload = {
      type : "text",
      text : "Good!"
    };
    return client.replyMessage(event.replyToken, payload);
  }
}

// listen on port
const port = process.env.PORT || 3000;
app.listen(port, () => {
  console.log(`listening on ${port}`);
});
